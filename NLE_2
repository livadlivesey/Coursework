{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Copy of NLEassignment2.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.4"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/livadlivesey/Coursework/blob/main/NLE_2\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "23Z3pzV0ceh5"
      },
      "source": [
        "# NLE Assignment 2: Distributional Semantics\n",
        "\n",
        "In this assignment, you will be investigating the *distributional hypothesis*: **words which appear in similar contexts tend to have similar meanings**.\n",
        "\n",
        "For assessment, you are expected to complete and submit this notebook file. When answers require code, you may import and use library functions (unless explicitly told otherwise). All of your own code should be included in the notebook rather than imported from elsewhere. Written answers should also be included in the notebook. You should insert as many extra cells as you want and change the type between code and markdown as appropriate.\n",
        "\n",
        "In order to avoid misconduct, you should not talk about the assignment questions with your peers. If you are not sure what a question is asking you to do or have any other questions, please ask me or one of the Teaching Assistants.\n",
        "\n",
        "Marking guidelines are provided as a separate document.\n",
        "\n",
        "The first few cells contain code to set-up the assignment and bring in some data. In order to provide unique datasets for analysis by different students, you must enter your candidate number in the following cell. Otherwise do not change the code in these cells."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "P5FRYFgGcdYH"
      },
      "source": [
        "candidateno=215865 #this MUST be updated to your candidate number so that you get a unique data sample"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RWe1DzridJTn",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "de22e57c-c1c3-4533-ab4f-1b700c80c330"
      },
      "source": [
        "#set up drives for resources.  Change the path as necessary\n",
        "\n",
        "from google.colab import drive\n",
        "#mount google drive\n",
        "drive.mount('/content/drive/')\n",
        "import sys\n",
        "sys.path.append('/content/drive/My Drive/Colab Notebooks/resources/')\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Mounted at /content/drive/\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "udnAzg7gdMmw",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "29a07566-8c17-4f7f-b233-ec0efa777d82"
      },
      "source": [
        "#do not change the code in this cell\n",
        "#preliminary imports\n",
        "\n",
        "import re\n",
        "import random\n",
        "import math\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "from itertools import zip_longest\n",
        "\n",
        "import nltk\n",
        "nltk.download('punkt')\n",
        "nltk.download('stopwords')\n",
        "nltk.download('wordnet')\n",
        "nltk.download('wordnet_ic')\n",
        "from nltk.tokenize import word_tokenize\n",
        "from nltk.corpus import stopwords\n",
        "from nltk.stem.porter import PorterStemmer\n",
        "from nltk.corpus import wordnet as wn\n",
        "from nltk.corpus import wordnet_ic as wn_ic\n",
        "brown_ic = wn_ic.ic(\"ic-brown.dat\")\n",
        "\n",
        "\n",
        "from sussex_nltk.corpus_readers import ReutersCorpusReader"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[nltk_data] Downloading package punkt to /root/nltk_data...\n",
            "[nltk_data]   Unzipping tokenizers/punkt.zip.\n",
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Unzipping corpora/stopwords.zip.\n",
            "[nltk_data] Downloading package wordnet to /root/nltk_data...\n",
            "[nltk_data]   Unzipping corpora/wordnet.zip.\n",
            "[nltk_data] Downloading package wordnet_ic to /root/nltk_data...\n",
            "[nltk_data]   Unzipping corpora/wordnet_ic.zip.\n",
            "Sussex NLTK root directory is /content/drive/My Drive/Colab Notebooks/resources\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Mfr4MFbOd5nx"
      },
      "source": [
        "We are going to be using the Reuters corpus of financial documents for this assignment.  When you run the following cell you should see that it contains 1,113,359 sentences."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Q4kNJlEYd1qc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5e0da4af-1c86-4393-b3dd-e221be2f8c13"
      },
      "source": [
        "#do not change the code in this cell\n",
        "rcr = ReutersCorpusReader().finance()\n",
        "rcr.enumerate_sents()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1113359"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CRApmpxneUqk"
      },
      "source": [
        "The following cell will take 2-5 minutes to run.  It will generate a unique-to-you sample of 200,000 sentences.  These sentences are tokenised and normalised for case and number for you."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RSPRsF6deOAR",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e8e8d838-6127-4af6-9bc5-6c0a01b1f4bf"
      },
      "source": [
        "#do not change the code in this cell\n",
        "def normalise(tokenlist):\n",
        "    tokenlist=[token.lower() for token in tokenlist]\n",
        "    tokenlist=[\"NUM\" if token.isdigit() else token for token in tokenlist]\n",
        "    tokenlist=[\"Nth\" if (token.endswith((\"nd\",\"st\",\"th\")) and token[:-2].isdigit()) else token for token in tokenlist]\n",
        "    tokenlist=[\"NUM\" if re.search(\"^[+-]?[0-9]+\\.[0-9]\",token) else token for token in tokenlist]\n",
        "    return tokenlist\n",
        "\n",
        "random.seed(candidateno)  \n",
        "samplesize=2000\n",
        "iterations =100\n",
        "sentences=[]\n",
        "for i in range(0,iterations):\n",
        "    sentences+=[normalise(sent) for sent in rcr.sample_sents(samplesize=samplesize)]\n",
        "    print(\"Completed {}%\".format(i))\n",
        "print(\"Completed 100%\")\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Completed 0%\n",
            "Completed 1%\n",
            "Completed 2%\n",
            "Completed 3%\n",
            "Completed 4%\n",
            "Completed 5%\n",
            "Completed 6%\n",
            "Completed 7%\n",
            "Completed 8%\n",
            "Completed 9%\n",
            "Completed 10%\n",
            "Completed 11%\n",
            "Completed 12%\n",
            "Completed 13%\n",
            "Completed 14%\n",
            "Completed 15%\n",
            "Completed 16%\n",
            "Completed 17%\n",
            "Completed 18%\n",
            "Completed 19%\n",
            "Completed 20%\n",
            "Completed 21%\n",
            "Completed 22%\n",
            "Completed 23%\n",
            "Completed 24%\n",
            "Completed 25%\n",
            "Completed 26%\n",
            "Completed 27%\n",
            "Completed 28%\n",
            "Completed 29%\n",
            "Completed 30%\n",
            "Completed 31%\n",
            "Completed 32%\n",
            "Completed 33%\n",
            "Completed 34%\n",
            "Completed 35%\n",
            "Completed 36%\n",
            "Completed 37%\n",
            "Completed 38%\n",
            "Completed 39%\n",
            "Completed 40%\n",
            "Completed 41%\n",
            "Completed 42%\n",
            "Completed 43%\n",
            "Completed 44%\n",
            "Completed 45%\n",
            "Completed 46%\n",
            "Completed 47%\n",
            "Completed 48%\n",
            "Completed 49%\n",
            "Completed 50%\n",
            "Completed 51%\n",
            "Completed 52%\n",
            "Completed 53%\n",
            "Completed 54%\n",
            "Completed 55%\n",
            "Completed 56%\n",
            "Completed 57%\n",
            "Completed 58%\n",
            "Completed 59%\n",
            "Completed 60%\n",
            "Completed 61%\n",
            "Completed 62%\n",
            "Completed 63%\n",
            "Completed 64%\n",
            "Completed 65%\n",
            "Completed 66%\n",
            "Completed 67%\n",
            "Completed 68%\n",
            "Completed 69%\n",
            "Completed 70%\n",
            "Completed 71%\n",
            "Completed 72%\n",
            "Completed 73%\n",
            "Completed 74%\n",
            "Completed 75%\n",
            "Completed 76%\n",
            "Completed 77%\n",
            "Completed 78%\n",
            "Completed 79%\n",
            "Completed 80%\n",
            "Completed 81%\n",
            "Completed 82%\n",
            "Completed 83%\n",
            "Completed 84%\n",
            "Completed 85%\n",
            "Completed 86%\n",
            "Completed 87%\n",
            "Completed 88%\n",
            "Completed 89%\n",
            "Completed 90%\n",
            "Completed 91%\n",
            "Completed 92%\n",
            "Completed 93%\n",
            "Completed 94%\n",
            "Completed 95%\n",
            "Completed 96%\n",
            "Completed 97%\n",
            "Completed 98%\n",
            "Completed 99%\n",
            "Completed 100%\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rDjqbB-WfhRg"
      },
      "source": [
        "`generate_features()` will used in the first part of the assignment."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FazdXtqJe1s-"
      },
      "source": [
        "#do not change the code in this cell\n",
        "def generate_features(sentences,window=1):\n",
        "    mydict={}\n",
        "    for sentence in sentences:\n",
        "        for i,token in enumerate(sentence):\n",
        "            current=mydict.get(token,{})\n",
        "            features=sentence[max(0,i-window):i]+sentence[i+1:i+window+1]\n",
        "            for feature in features:\n",
        "                current[feature]=current.get(feature,0)+1\n",
        "            mydict[token]=current\n",
        "    return mydict"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fLv0yZx7f4ol"
      },
      "source": [
        "1) Run `generate_features(sentences[:5])`. With reference to the code and the specific examples, explain how the output was generated [10 marks]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IlyVS0IiyxWN"
      },
      "source": [
        "generate_features returns a dictionary of dictionaries where the key for each outer dictionary is the token, and the value is a dictionary of co-occurring tokens in the specified window. The key for each entry in the inner dictionary is a co-occurring word, and the value is the number of co-occurrences. \n",
        "\n",
        "The code does this by first creating an empty dictionary, mydict and then iterating over the sentences given as a parameter. For this example, the sentences are the first 5 sentences in the 'sentences' variable. Then, the function enumerates over each token in the sentence, so that the index of the token in the sentence can be accessed. For each token in the sentence, 'current' accesses the inner dictionary for the current token, if there isn't a dictionary it creates one. The variable 'features' then stores the list of tokens within the context window (which is 1 in this example) of the current token. The list of features is then iterated over, and each feature becomes a key for the inner dictionary of co-occurring tokens, and the value is incremented for each co-occurrence. The outer dictionary, 'mydict' then stores the current token as the key for the entry, and the 'current' dictionary as the value for the entry. \n",
        "This is repeated for each token in the sentence, and each sentence in 'sentences' \n",
        "\n",
        "For example, the token 'billion' forms a key for an entry in the dictionary 'mydict'. The corresponding value for 'billion' is another dictionary 'current', where the key for the first entry is 'NUM' and the value is 1. This represents how within a window size of 1 from 'billion', the token 'NUM' occurs once. \n",
        "\n",
        "Similarly, the token '%' co-occurs with 'NUM' twice. This dictionary entry is calculated by firstly, when the token is reached in the line 'for i,token in enumerate(sentence)', creating a 'current' dictionary. A list of features are then generated within the window size 1, and these are only 'NUM'. The line 'current[feature]=current.get(feature,0)+1' then increments the value for 'NUM' for each occurrence, which is 2 in this example. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3rnUZ_EogIW8",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "feef648f-9035-4abc-abcf-e86247b8225d"
      },
      "source": [
        "generate_features(sentences[:5])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'$': {'NUM': 1, 'provides': 1},\n",
              " '%': {'NUM': 2},\n",
              " '(': {'m0': 1, 'prov': 1},\n",
              " ')': {'prov': 1, 'sa': 1},\n",
              " '.': {'companies': 1},\n",
              " '11/01/2008': {'765m': 1},\n",
              " '15,725,000*': {},\n",
              " '765m': {'11/01/2008': 1, 'NUM': 1},\n",
              " 'NUM': {'$': 1, '%': 2, '765m': 1, 'billion': 1, 'mon': 1, 'series': 1},\n",
              " 'a': {'series': 1},\n",
              " 'administration': {'for': 1, 'the': 1},\n",
              " 'also': {'bill': 1, 'provides': 1},\n",
              " 'aug': {'n/f': 1, 'sa': 1},\n",
              " 'bank': {'export-import': 1, 'loans': 1},\n",
              " 'bill': {'also': 1, 'spending': 1},\n",
              " 'billion': {'NUM': 1, 'requested': 1},\n",
              " 'by': {'requested': 1, 'the': 1},\n",
              " 'companies': {'.': 1, 'u.s.': 1},\n",
              " 'export-import': {'bank': 1, 'for': 1},\n",
              " 'for': {'administration': 1, 'export-import': 1},\n",
              " 'loans': {'bank': 1, 'to': 1},\n",
              " 'm0': {'(': 1, 'uk': 1},\n",
              " 'mon': {'NUM': 1, 'uk': 1},\n",
              " 'n/a': {'n/a': 2, 'pct': 1},\n",
              " 'n/f': {'aug': 1, 'pct': 1},\n",
              " 'pct': {'n/a': 1, 'n/f': 1},\n",
              " 'prov': {'(': 1, ')': 1},\n",
              " 'provides': {'$': 1, 'also': 1},\n",
              " 'requested': {'billion': 1, 'by': 1},\n",
              " 'sa': {')': 1, 'aug': 1},\n",
              " 'series': {'NUM': 1, 'a': 1},\n",
              " 'spending': {'bill': 1, 'the': 1},\n",
              " 'the': {'administration': 1, 'by': 1, 'spending': 1},\n",
              " 'to': {'loans': 1, 'u.s.': 1},\n",
              " 'u.s.': {'companies': 1, 'to': 1},\n",
              " 'uk': {'m0': 1, 'mon': 1}}"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "i3YCEZUtgK2Q",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b649bc79-1353-42c6-852b-10eb1a0bf8b0"
      },
      "source": [
        "print(sentences[:5])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[['the', 'spending', 'bill', 'also', 'provides', '$', 'NUM', 'billion', 'requested', 'by', 'the', 'administration', 'for', 'export-import', 'bank', 'loans', 'to', 'u.s.', 'companies', '.'], ['NUM', 'series', 'a'], ['15,725,000*'], ['11/01/2008', '765m', 'NUM', '%', 'NUM'], ['NUM', 'mon', 'uk', 'm0', '(', 'prov', ')', 'sa', 'aug', 'n/f', 'pct', 'n/a', 'n/a']]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nnfWmKkChEtG"
      },
      "source": [
        "2) Write code and **find** the 1000 most frequently occurring words that\n",
        "* are in your sample; AND\n",
        "* have at least one noun sense according to WordNet [10 marks]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1BQ6UcbXoYqy"
      },
      "source": [
        "I removed the stopwords from the top 1000 most common, to have more meaningful words for the later questions in the assignment. If I included stopwords in the top 1000 words, the most frequent would be 'in' which would not produce very interesting answers for the most similar words, or the distributional similarity questions at the end of the assignment. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hWa2AHk3hSL0",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c3abbeaf-4eb8-4b9f-cdba-946bade9e8bc"
      },
      "source": [
        "import operator\n",
        "\n",
        "\n",
        "\n",
        "def find_candidates():\n",
        "  candidates = {} #Dictionary to store the words and their associated frequencies\n",
        "  for sentence in sentences: #Iterate over sentences in sample\n",
        "    for word in sentence: #Iterate over each word in sentence\n",
        "      if len(wn.synsets(word, wn.NOUN))>=1: #Check that there is at least 1 noun sense for the word\n",
        "        candidates[word]=candidates.get(word,0)+1 #Increment frequency of word using dictionary entries\n",
        "  return sorted(candidates.items(), key=operator.itemgetter(1), reverse=True) #Sort the dictionary by decreasing frequency to find most frequently occurring words\n",
        "\n",
        "\n",
        "cands = list(find_candidates()) #Create a list of the most frequent words that meet the criteria \n",
        "top1000 = [word for (word,freq) in cands if not word in stopwords.words()][:1000] #Remove the frequencies and stopwords from the list to show only the most frequent words that have at least one noun sense, and only store the top 1000 of these in this list\n",
        "print(top1000)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "['percent', 'pct', 'bank', 'year', 'million', 'government', 'may', 'billion', 'uk', 'tax', 'rate', 'trade', 'budget', 'growth', 'last', 'first', 'u.s.', 'central', 'market', 'june', 'price', 'newsroom', 'state', 'union', 'inflation', 'bonds', 'rates', 'economy', 'week', 'prices', 'april', 'currency', 'minister', 'interest', 'finance', 'deficit', 'two', 'gdp', 'european', 'tuesday', 'wednesday', 'time', 'july', 'years', 'march', 'thursday', 'official', 'index', 'current', 'apr', 'month', 'change', 'rise', 'total', 'sales', 'fri', 'due', 'policy', 'issue', 'unemployment', 'balance', 'three', 'public', 'country', 'president', 'monday', 'debt', 'friday', 'cut', 'consumer', 'investment', 'months', 'international', 'capital', 'wed', 'bond', 'exports', 'increase', 'sector', 'countries', 'strike', 'company', 'business', 'meeting', 'states', 'national', 'quarter', 'domestic', 'workers', 'data', 'markets', 'money', 'officials', 'exchange', 'people', 'plan', 'banks', 'still', 'rose', 'companies', 'statement', 'spending', 'house', 'emu', 'analysts', 'talks', 'dollar', 'industry', 'china', 'labour', 'city', 'ministry', 'report', 'coupon', 'world', 'agreement', 'usa', 'germany', 'reserves', 'figures', 'japan', 'bill', 'general', 'german', 'date', 'aug', 'credit', 'output', 'period', 'news', 'inc', 'set', 'average', 'series', 'say', 'oil', 'imports', 'high', 'deal', 'five', 'retail', 'securities', 'jobs', 'make', 'plans', 'treasury', 'south', 'group', 'county', 'france', 'system', 'prime', 'fund', 'help', 'forecast', 'school', 'call', 'federal', 'pay', 'work', 'amount', 'goods', 'economists', 'see', 'account', 'following', 'think', 'economist', 'level', 'final', 'indicators', 'lower', 'annual', 'maturity', 'single', 'real', 'go', 'much', 'local', 'demand', 'part', 'must', 'delivery', 'private', 'conference', 'net', 'second', 'services', 'funds', 'reform', 'development', 'meet', 'well', 'committee', 'cpi', 'board', 'europe', 'food', 'says', 'key', 'recent', 'imf', 'move', 'back', 'investors', 'even', 'yield', 'four', 'housing', 'gross', 'measures', 'saying', 'production', 'us', 'clinton', 'major', 'revenue', 'target', 'fall', 'party', 'way', 'decision', 'six', 'surplus', 'reserve', 'issues', 'cost', 'fell', 'service', 'going', 'aid', 'desk', 'low', 'moody', 'french', 'department', 'number', 'need', 'office', 'italy', 'parliament', 'day', 'reforms', 'gold', 'cuts', 'product', 'members', 'employment', 'orders', 'support', 'euro', 'basis', 'good', 'half', 'law', 'firms', 'start', 'chief', 'leaders', 'statistics', 'latest', 'wage', 'social', 'income', 'february', 'spokesman', 'p', 'bundesbank', 'monthly', 'export', 'points', 'feb', 'north', 'reporters', 'costs', 'commission', 'entry', 'get', 'british', 'survey', 'fed', 'less', 'york', 'britain', 'london', 'taxes', 'raise', 'put', 'district', 'programme', 'russia', 'point', 'agency', 'changes', 'january', 'conditions', 'marks', 'august', 'thailand', 'future', 'far', 'days', 'past', 'terms', 'yen', 'japanese', 'job', 'stock', 'india', 'aaa', 'co', 'congress', 'criteria', 'council', 'loans', 'might', 'keep', 'senior', 'give', 'senate', 'stability', 'main', 'possible', 'nations', 'bid', 'despite', 'vote', 'like', 'canada', 'mark', 'election', 'opposition', 'power', 'unions', 'given', 'former', 'note', 'supply', 'payments', 'action', 'problems', 'authority', 'ex', 'pressure', 'forecasts', 'levels', 'bonn', 'manufacturing', 'book', 'proposal', 'kohl', 'little', 'use', 'health', 'september', 'privatisation', 'mexico', 'washington', 'chairman', 'firm', 'seven', 'summit', 'korea', 'coalition', 'free', 'region', 'term', 'treaty', 'working', 'ministers', 'overall', 'today', 'prod', 'revenues', 'percentage', 'baht', 'governor', 'security', 'director', 'trading', 'africa', 'full', 'value', 'clear', 'member', 'czech', 'gmt', 'australia', 'head', 'australian', 'construction', 'impact', 'small', 'situation', 'confidence', 'labor', 'employees', 'morgan', 'leader', 'subject', 'management', 'institute', 'figure', 'weeks', 'notes', 'trend', 'thai', 'boost', 'rating', 'least', 'building', 'legislation', 'wages', 'open', 'products', 'base', 'bureau', 'close', 'brazil', 'package', 'leading', 'large', 'pact', 'loan', 'obligation', 'project', 'improvement', 'negotiations', 'share', 'trillion', 'daily', 'right', 'american', 'commercial', 'place', 'rule', 'plant', 'better', 'brown', 'source', 'sources', 'control', 'sunday', 'banking', 'taiwan', 'lead', 'import', 'russian', 'line', 'cash', 'order', 'cabinet', 'lending', 'dollars', 'top', 'administration', 'sell', 'details', 'association', 'insurance', 'white', 'secretary', 'recovery', 'deposits', 'research', 'rising', 'interview', 'result', 'effect', 'december', 'show', 'hit', 'policies', 'offer', 'newspaper', 'special', 'pension', 'projects', 'tonnes', 'left', 'paper', 'chancellor', 'hold', 'problem', 'worth', 'award', 'savings', 'view', 'force', 'education', 'issuer', 'pounds', 'process', 'deputy', 'join', 'earnings', 'assets', 'features', 'third', 'contract', 'growing', 'position', 'record', 'east', 'drop', 'spain', 'wholesale', 'efforts', 'home', 'rules', 'areas', 'shares', 'list', 'starts', 'none', 'operations', 'producer', 'crisis', 'coming', 'information', 'results', 'republican', 'african', 'democrats', 'progress', 'positive', 'commerce', 'preliminary', 'making', 'needs', 'poor', 'taking', 'wants', 'corp', 'case', 'asian', 'poland', 'nation', 'measure', 'risk', 'court', 'staff', 'reach', 'texas', 'benefits', 'hungary', 'present', 'decline', 'look', 'activity', 'enough', 'increases', 'dispute', 'energy', 'means', 'short', 'sees', 'stable', 'dealers', 'executive', 'singapore', 'water', 'delay', 'saw', 'question', 'minimum', 'proposals', 'eight', 'bills', 'majority', 'unit', 'auction', 'saturday', 'range', 'ratio', 'profits', 'borrowing', 'property', 'comment', 'elections', 'iraq', 'indicator', 'expectations', 'israel', 'jan', 'ruling', 'rights', 'concern', 'republic', 'trust', 'tic', 'hours', 'analyst', 'authorities', 'america', 'crown', 'rises', 'looking', 'sectors', 'port', 'launch', 'return', 'asia', 'poll', 'gains', 'accounts', 'relations', 'area', 'sanctions', 'francs', 'paris', 'peso', 'western', 'pace', 'investments', 'reduction', 'outside', 'outlook', 'italian', 'zealand', 'frankfurt', 'm2', 'strength', 'membership', 'sign', 'expansion', 'funding', 'west', 'review', 'transport', 'gap', 'times', 'necessary', 'october', 'welfare', 'discuss', 'program', 'fact', 'enhancements', 'lost', 'currencies', 'military', 'deficits', 'targets', 'crowns', 'independent', 'act', 'cooperation', 'air', 'campaign', 'visit', 'gas', 'press', 'groups', 'relief', 'rand', 'john', 'reason', 'defence', 'businesses', 'forward', 'financing', 'volume', 'agent', 'nine', 'led', 'signs', 'community', 'nsa', 'industries', 'focus', 'notice', 'peace', 'initial', 'indian', 'tokyo', 'hope', 'pricing', 'chinese', 'whole', 'institutions', 'street', 'consumption', 'weekly', 'form', 'wto', 'longer', 'speech', 'side', 'capacity', 'find', 'television', 'external', 'approval', 'quarterly', 'sterling', 'estimate', 'parties', 'limited', 'indonesia', 'beijing', 'pound', 'seek', 'pressures', 'traders', 'smith', 'finances', 'organisation', 'sr', 'benefit', 'sides', 'partners', 'buy', 'run', 'agriculture', 'personal', 'm3', 'try', 'liquidity', 'bulgaria', 'debate', 'california', 'yields', 'lot', 'release', 'selling', 'step', 'remains', 'motor', 'schools', 'ready', 'november', 'canadian', 'bankers', 'gm', 'claims', 'role', 'portugal', 'stocks', 'found', 'planning', 'beginning', 'david', 'summer', 'speaking', 'spokeswoman', 'moscow', 'estimates', 'announcement', 'agreements', 'vs', 'assembly', 'economies', 'begin', 'conservative', 'comments', 'sep', 'romania', 'potential', 'performance', 'credits', 'goal', 'swiss', 'access', 'socialist', 'panel', 'behind', 'best', 'input', 'finland', 'limit', 'population', 'push', 'car', 'leave', 'raising', 'study', 'steady', 'cutting', 'reports', 'teamsters', 'factors', 'governments', 'pilots', 'bids', 'communist', 'tough', 'expenditure', 'republicans', 'malaysia', 'numbers', 'philippines', 'scheme', 'joint', 'flights', 'federation', 'chicago', 'draft', 'steps', 'seeking', 'insured', 'pakistan', 'mean', 'concerns', 'police', 'human', 'yr', 'morning', 'losses', 'consensus', 'rest', 'running', 'hike', 'protest', 'sharp', 'competition', 'facilities', 'vietnam', 'wheat', 'speculation', 'getting', 'radio', 'hopes', 'laws', 'things', 'university', 'table', 'manager', 'stage', 'customs', 'representatives', 'dutch', 'plus', 'cross', 'polish', 'life', 'know', 'rupees', 'argentina', 'airline', 'corporation', 'environment', 'using', 'employers', 'amsterdam', 'accord', 'calls', 'england', 'negative', 'commitment', 'm1', 'broad', 'fuel', 'millions', 'billions', 'b', 'lawmakers', 'centre', 'standard', 'forces', 'stake', 'holding', 'treasurer', 'manufacturers', 'tightening', 'infrastructure', 'bad', 'bear', 'demands', 'starting', 'payment', 'intervention', 'tender', 'workforce', 'philippine', 'affairs', 'session', 'ukraine', 'brothers', 'core', 'factor', 'flat', 'robert', 'giving', 'principal', 'cover', 'individual', 'normal', 'round', 'site', 'discount', 'ways', 'tourism', 'response', 'children', 'cities', 'ratings', 'opinion', 'spread', 'george', 'slowdown', 'weekend', 'fight', 'devaluation', 'transportation', 'consumers', 'chance', 'deals', 'sweden', 'gos', 'build', 'opening', 'extra', 'address', 'controls', 'contracts', 'idea', 'sls', 'track', 'equipment', 'enterprises', 'moves', 'course', 'road', 'korean', 'turn', 'household', 'easing', 'gain', 'brussels', 'programmes', 'compliance', 'sd', 'break', 'slovak', 'iran', 'ease', 'mortgage', 'makes', 'experts', 'red', 'levs', 'offering', 'threat', 'items', 'materials', 'fourth', 'fax', 'effects', 'purchase', 'letter', 'separate', 'old', 'team', 'chile', 'thought', 'common', 'bit', 'charges', 'hand', 'showing', 'room', 'sydney', 'assistance', 'plants', 'james', 'mining', 'parts', 'resolution', 'creation', 'nominal', 'basic', 'talk', 'settlement', 'falls', 'differences', 'representative', 'buying', 'nothing', 'possibility', 'unemployed', 'deadline', 'vice', 'drive', 'alternative', 'christian', 'sugar', 'rbi', 'great', 'affect', 'spanish', 'prospects', 'cars', 'telephone', 'economics', 'middle', 'keeping', 'cause', 'comes', 'favour']\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "opO2PAMV4_uc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "52a101f9-f91b-427d-debf-4405463e7c16"
      },
      "source": [
        "#do not change the code in this cell.  It relates to Q3\n",
        "wordpair=(\"house\",\"garden\")\n",
        "concept_1=wn.synsets(wordpair[0])[0]\n",
        "concept_2=wn.synsets(wordpair[1])[0]\n",
        "print(\"Path similarity between 1st sense of {} and 1st sense of {} is {}\".format(wordpair[0],wordpair[1],wn.path_similarity(concept_1,concept_2)))\n",
        "print(\"Resnik similarity between 1st sense of {} and 1st sense of {} is {}\".format(wordpair[0],wordpair[1],wn.res_similarity(concept_1,concept_2, brown_ic)))\n",
        "print(\"Lin similarity between 1st sense of {} and 1st sense of {} is {}\".format(wordpair[0],wordpair[1],wn.lin_similarity(concept_1,concept_2, brown_ic)))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Path similarity between 1st sense of house and 1st sense of garden is 0.08333333333333333\n",
            "Resnik similarity between 1st sense of house and 1st sense of garden is 1.2900256809649917\n",
            "Lin similarity between 1st sense of house and 1st sense of garden is 0.15380807721262396\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ezzW3xqpszB2"
      },
      "source": [
        "3) Consider the code above which outputs the path similarity score, the Resnik similarity score and the Lin similarity score for a pair of concepts in WordNet.  Answer the following questions.\n",
        "\n",
        "a) Explain what each of the numbers in the output means.\n",
        "\n",
        "b) Write code to find the semantic similarity of a pair of words according to WordNet with a parameter to specify the measure of semantic similarity between concepts.  Explain and justify the strategy used for words which have multiple senses.\n",
        "\n",
        "c) Choose one of the measures of semantic similarity and then for every possible pair of words identified in Q2, determine the semantic similarity of the pair according to WordNet.  Justify your choice of semantic similarity measure.\n",
        "\n",
        "d) Identify the 10 most similar words (according to WordNet) to the most frequent word in the corpus [20 marks]"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "We3bSczg4pTM",
        "outputId": "e7099ee0-982d-4d07-89e5-069e9f0e5c9b"
      },
      "source": [
        "print(concept_1.definition())\n",
        "print(concept_2.definition())\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "a dwelling that serves as living quarters for one or more families\n",
            "a plot of ground where plants are cultivated\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DwjiTeg2GuhM"
      },
      "source": [
        "(a) Path similarity is measured on a scale of 0-1, and denotes the shortest path that connects the two senses. So the score of 0.083, is very low and indicates that the senses are not similar. Resnik similarity is measured on a scale of 0 to infinity, and returns the information content of the lowest common subsumer of the two concepts. We can also see that 1.29 is a low score and further suggests that the senses do not share meaning. Lin similarity uses the same measures as Resnik, but converts the score to a ratio out of 1. Therefore, 0.15 is a little higher compared to the other similarity scores and suggests some relation between the senses. All 3 scores are relatively low, but show that there is some relation between 'house' and 'garden' but not that they mean similar things. For example, the senses may be connected in a taxonomy, such as both the words relate to the grounds of a building, or property. This is demonstrated by the above definitions. "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HJMxd2ku2rkW"
      },
      "source": [
        "(b) When words have multiple senses, the word_similarity function checks all the combinations of the senses for each word, and uses the combination which produces the maximum similarity. The function also only considers noun senses for the words, in order to reduce the combinations, and also ensure that each sense can be compared as they are from the same part of speech.  "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cBJ2fpwyvLsS"
      },
      "source": [
        "from nltk.wsd import lesk\n",
        "\n",
        "def word_similarity(word1, word2, measure):\n",
        "  word1s = wn.synsets(word1, wn.NOUN) #Finds a list of the noun synsets for the given words \n",
        "  word2s = wn.synsets(word2, wn.NOUN)\n",
        "  max_sim = 0 #Initialises the similarity as 0\n",
        "  brown_ic=wn_ic.ic(\"ic-brown.dat\") #Implement the brown corpus\n",
        "  for i in range(len(word1s)): #Iterate through the synsets of the words\n",
        "    for j in range(len(word2s)):\n",
        "      if measure==\"path\": \n",
        "        sim=wn.path_similarity(word1s[i], word2s[j]) #If the measure given is path, peform path similarity on synsets\n",
        "      elif measure==\"lin\":\n",
        "        sim=wn.lin_similarity(word1s[i], word2s[j], brown_ic) #Use the lin similarity measure\n",
        "      elif measure==\"res\":\n",
        "        sim=wn.res_similarity(word1s[i], word2s[j], brown_ic) #Use the Resnik similarity measure\n",
        "      if sim > max_sim: #If the similarity is greater than the current max_sim, it becomes the max_sim value\n",
        "        max_sim = sim\n",
        "  return max_sim\n",
        "\n",
        "  \n",
        "\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JhdzlOjesiGZ"
      },
      "source": [
        "(c)\n",
        "My sample of words from this question onwards is only the top 100 words. This is because it was taking a very long time, (40 minutes to do 2% of the iterations), to run on the full 1000 words. I emailed Julie about this and she agreed that 100 words was suitable given this situation. \n",
        " I also wanted to choose the Lin similarity measure as this considers Information Content of the Least Common Subsumer (LCS) when calculating the word similarity, like the Resnik score. Lin creates a ratio of similarity between the words, which allows a better comparison of similarity over many word pairs. However, Julie suggested that a different similarity measure may be quicker, and I found that using the Path Similarity measure reduced the running time also. \n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "e0GcljuDrB04"
      },
      "source": [
        "top100 = [word for (word,freq) in cands if not word in stopwords.words()][:100]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SgwjBttTPNNO",
        "outputId": "54e8059e-5777-4723-909f-52104515011d"
      },
      "source": [
        "similarity = {} #Create a dictionary to store all the words and their corresponding similarity scores\n",
        "for i in range(0, len(top100)):\n",
        "  current=similarity.get(top100[i], {}) #For each word, find the corresponding dictionary which stores each word it will be compared to, or create a new dictionary if one does not already exist\n",
        "  for j in range(i+1, len(top100)): #This uses the range (i+1, len(top100)) to prevent the comparison of the same pair of words twice\n",
        "    if top100[i] != top100[j]: #Check that the word is not being compared to itself\n",
        "      current[top100[j]]=(word_similarity(top100[i],top100[j], measure=\"path\")) #Calculate the Path similarity measure for the pair of words and store the value in the inner dictionary for the word\n",
        "  print(\"Completed {}%\".format(i))\n",
        "  similarity[top100[i]]=current #Add the inner dictionary 'current' as the value for the outer dictionary 'similarity' where the key is the first word being compared\n",
        "print(\"Completed 100%\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Completed 0%\n",
            "Completed 1%\n",
            "Completed 2%\n",
            "Completed 3%\n",
            "Completed 4%\n",
            "Completed 5%\n",
            "Completed 6%\n",
            "Completed 7%\n",
            "Completed 8%\n",
            "Completed 9%\n",
            "Completed 10%\n",
            "Completed 11%\n",
            "Completed 12%\n",
            "Completed 13%\n",
            "Completed 14%\n",
            "Completed 15%\n",
            "Completed 16%\n",
            "Completed 17%\n",
            "Completed 18%\n",
            "Completed 19%\n",
            "Completed 20%\n",
            "Completed 21%\n",
            "Completed 22%\n",
            "Completed 23%\n",
            "Completed 24%\n",
            "Completed 25%\n",
            "Completed 26%\n",
            "Completed 27%\n",
            "Completed 28%\n",
            "Completed 29%\n",
            "Completed 30%\n",
            "Completed 31%\n",
            "Completed 32%\n",
            "Completed 33%\n",
            "Completed 34%\n",
            "Completed 35%\n",
            "Completed 36%\n",
            "Completed 37%\n",
            "Completed 38%\n",
            "Completed 39%\n",
            "Completed 40%\n",
            "Completed 41%\n",
            "Completed 42%\n",
            "Completed 43%\n",
            "Completed 44%\n",
            "Completed 45%\n",
            "Completed 46%\n",
            "Completed 47%\n",
            "Completed 48%\n",
            "Completed 49%\n",
            "Completed 50%\n",
            "Completed 51%\n",
            "Completed 52%\n",
            "Completed 53%\n",
            "Completed 54%\n",
            "Completed 55%\n",
            "Completed 56%\n",
            "Completed 57%\n",
            "Completed 58%\n",
            "Completed 59%\n",
            "Completed 60%\n",
            "Completed 61%\n",
            "Completed 62%\n",
            "Completed 63%\n",
            "Completed 64%\n",
            "Completed 65%\n",
            "Completed 66%\n",
            "Completed 67%\n",
            "Completed 68%\n",
            "Completed 69%\n",
            "Completed 70%\n",
            "Completed 71%\n",
            "Completed 72%\n",
            "Completed 73%\n",
            "Completed 74%\n",
            "Completed 75%\n",
            "Completed 76%\n",
            "Completed 77%\n",
            "Completed 78%\n",
            "Completed 79%\n",
            "Completed 80%\n",
            "Completed 81%\n",
            "Completed 82%\n",
            "Completed 83%\n",
            "Completed 84%\n",
            "Completed 85%\n",
            "Completed 86%\n",
            "Completed 87%\n",
            "Completed 88%\n",
            "Completed 89%\n",
            "Completed 90%\n",
            "Completed 91%\n",
            "Completed 92%\n",
            "Completed 93%\n",
            "Completed 94%\n",
            "Completed 95%\n",
            "Completed 96%\n",
            "Completed 97%\n",
            "Completed 98%\n",
            "Completed 99%\n",
            "Completed 100%\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "U0qWvUotYNBk"
      },
      "source": [
        "(d)  For this question, I used the similarity dictionary created in the previous question, to find the similarity scores between the most common word, and all other words in the top100. These most similar words, were sorted from highest to lowest similarity scores and I printed the top 10. \n",
        "I also attempted to use the WordNet 'similar_tos()' function to find the similar words in the Word Net tree, but this returned an empty list. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MUXH8rbsXLQb",
        "outputId": "e3159311-568d-4dc0-d820-e3442ee5d921"
      },
      "source": [
        "most_common = top100[0]\n",
        "print(\"The most common word in my sample that has at least one noun sense, not including stopwords, is: \"+ most_common)\n",
        "most_similar = []\n",
        "most_similar = sorted(similarity.get(most_common).items(), key=operator.itemgetter(1), reverse=True)[:10]\n",
        "print(most_similar)\n",
        "for ss in wn.synsets(most_common):\n",
        "  print(ss.similar_tos())\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "The most common word in my sample that has at least one noun sense, not including stopwords, is: percent\n",
            "[('pct', 1.0), ('rate', 0.3333333333333333), ('rates', 0.3333333333333333), ('change', 0.14285714285714285), ('bonds', 0.125), ('balance', 0.125), ('bond', 0.125), ('state', 0.1111111111111111), ('deficit', 0.1111111111111111), ('time', 0.1111111111111111)]\n",
            "[]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3BxDUsFkhSzD"
      },
      "source": [
        "4)a) Write code to construct distributional vector representations of words in the corpus with a parameter to specify context size.  Explain how you calculate the value of association between each word and each context feature.\n",
        "\n",
        "b) Use your code to construct representations of the 1000 words identified in Q2 with a window size of 1 \n",
        "\n",
        "c) Use your representations to find the 10 words which are distributionally most similar to the most frequent word in the corpus. [15 marks]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hOXu2TbUhYfg"
      },
      "source": [
        "(a) I have used PPMI to calculate the value of association between each word and context feature. The PPMI is calculated using variables 'wordtotals' , 'feattotals', and 'grandtotal' which are created when initialising the class word_vectors by the function 'generate_features'. The function calculate_PPMI() creates a dictionary, where the key for each entry is the word. The value for each entry is a dictionary, where each key is a co-occurring word, 'feature' in the given window, and the corresponding entry is the PPMI value for the word and feature. The PPMI value is calculated by taking the log (to the base 2) of: the number of co-occurrences of the word and feature multiplied by the grand total, divided by the frequency of the word multiplied by the frequency of the feature. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "k5mZKdJdrY4Q"
      },
      "source": [
        "def dot(vecA,vecB):\n",
        "  '''\n",
        "  Returns the dot product of the two given vectors for the similarity function.\n",
        "  '''\n",
        "  the_sum=0\n",
        "  for (key,value) in vecA.items():\n",
        "    the_sum+=value*vecB.get(key,0)\n",
        "  return the_sum\n",
        "\n",
        "class word_vectors:\n",
        "  '''\n",
        "  A class to construct distributional vector representations of words in a given corpus\n",
        "  Is initialised with a list of sentences and a desired window size. On initialisation, the feature representations of all words, together with word totals and feature totals should be generated and stored in the object as\n",
        "  self.reps (the feature representations: a dictionary of dictionaries}\n",
        "  self.wordtotals (the frequency of each word: a dictionary of integers (with the same keys as self.reps)\n",
        "  self.feattotals (the frequency of each feature: a dictionary of integers (with the same keys as the dictionaries indexed by self.reps)\n",
        "  '''\n",
        "  def __init__(self, sentences, window=1):\n",
        "    self.sentences=sentences \n",
        "    self.window=window #The default value for window is 1\n",
        "    self.reps={}       #A dictionary of dictionaries storing the feature representations\n",
        "    self.wordtotals={} #A dictionary where each word is a key, and the value is the corresponding number of occurrences\n",
        "    self.feattotals={} #A dictionary where each feature as a key, and the value is the corresponding number of occurrences\n",
        "    self.generate_features() #Run generate_features on initialisation to calculate wordtotals, feattotals, reps\n",
        "    self.grandtotal=sum(self.wordtotals.values()) #Total number of occurrences of all words for the purpose of calculating PPMI\n",
        "    self.calculate_PPMI() #Run calculate_PPMI on initialisation to find values for words\n",
        "\n",
        "  def generate_features(self):\n",
        "    for sentence in self.sentences:\n",
        "      for i,token in enumerate(sentence): #enumerate allows us to use the index of token in sentence\n",
        "        current = self.reps.get(token,{}) #Assign 'current' to the dictionary for the token, or create one if one does not exist\n",
        "        features = sentence[max(0,i-self.window):i]+sentence[i+1:i+self.window+1] #\n",
        "        for feature in features:\n",
        "          current[feature]=current.get(feature,0)+1 #counting the co-occurrences of the features\n",
        "          self.feattotals[feature]=self.feattotals.get(feature,0)+1 #each time we see a feature, increment it's total value\n",
        "        self.wordtotals[token]=self.wordtotals.get(token,0)+len(features)\n",
        "        self.reps[token]=current\n",
        "\n",
        "  def calculate_PPMI(self):\n",
        "    self.ppmi={word:{feat:max(0,math.log2((freq*self.grandtotal)/(self.wordtotals[word]*self.feattotals[feat]))) for (feat,freq) in rep.items()} for (word,rep) in self.reps.items()}\n",
        "  \n",
        "\n",
        "  def similarity(self, word1, word2):\n",
        "    '''\n",
        "    Calculates and returns the distributional similarity of two given words based on cosine similarity.\n",
        "    Finds the representation of each word, and the PPMI value for that word, and uses the dot product method to find the similarity\n",
        "    '''\n",
        "    rep1 = self.ppmi.get(word1, {})\n",
        "    rep2 = self.ppmi.get(word2, {})\n",
        "    return dot(rep1,rep2)/math.sqrt(dot(rep1,rep1)*dot(rep2,rep2))\n",
        "\n",
        "  def k_nearest(self, word1, n=1000, k=10):\n",
        "    '''\n",
        "    Finds the K Nearest Neighbours of a given word, within a sample size of n. \n",
        "    '''\n",
        "    candidates = sorted(self.wordtotals.items(), key=operator.itemgetter(1), reverse=True)[:n] #1000 most frequent words as candidates\n",
        "    sims = [(cand,self.similarity(word1,cand))for (cand,_) in candidates]\n",
        "    return sorted(sims, key=operator.itemgetter(1), reverse=True)[:k]\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZGROJY4l0QAK"
      },
      "source": [
        "(b) To construct a representation of the top1000 words, I create an instance of the word_vectors class using the sentences created at the beginning of the notebook. You cannot just use the top words, as vector representations rely on the co-occuring features in a given window size. I have also done some print statements to check the functionality of the class. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UgW0Lvk8Mpho"
      },
      "source": [
        "#filtered_sentences = [[word for word in sentence if not word in stopwords.words()] for sentence in sentences]\n",
        "vectors_1=word_vectors(sentences)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "W-WNITR9Qh81",
        "outputId": "224e5894-be06-4308-a9a0-cb9d6c4229c4"
      },
      "source": [
        "print(vectors_1.reps['percent'])\n",
        "print(vectors_1.reps['percent']['rate'])\n",
        "print(vectors_1.ppmi['percent']['rate'])\n",
        "print(vectors_1.similarity('percent','rate'))\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "{'NUM': 15526, 'in': 3133, 'this': 235, '.': 2171, 'from': 848, 'year-on-year': 318, 'through': 7, 'to': 527, 'has': 3, 'four': 203, 'fall': 51, 'and': 489, ',': 1580, 'month': 15, 'year': 52, 'of': 2299, ')': 194, 'three': 643, 'reached': 2, 'aided': 2, 'between': 21, 'were': 41, 'while': 55, 'coupon': 36, 'would': 34, 'number': 2, 'two': 223, 'five': 317, 'below': 46, 'or': 80, 'increase': 169, 'for': 322, 'criteria': 4, 'stake': 80, 'points': 5, 'on': 294, 'decline': 48, 'after': 111, 'rise': 292, 'versus': 25, 'at': 150, 'forty-five': 1, 'given': 5, 'deposit': 2, '8-9': 7, 'by': 151, 'is': 52, 'seven': 158, 'over': 127, 'nine': 93, 'against': 125, 'lower': 55, 'quarter-to-quarter': 1, 'changes': 14, 'target': 77, 'reference': 6, 'higher': 98, 'starting': 5, 'previously': 11, 'following': 7, '15-21': 1, 'hike': 7, 'planned': 12, 'devaluation': 10, 'month-on-month': 79, 'excluding': 1, 'a': 118, '--': 55, '(': 137, 'change': 33, 'surplus': 5, 'opposed': 7, 'drop': 49, 'service': 9, 'the': 40, 'unemployment': 21, '1/3': 1, 'who': 9, 'but': 40, 'monitoring': 5, 'witholding': 2, 'inflation': 28, 'threshold': 10, 'so': 12, 'eighteen': 3, 'contraction': 8, 'off': 2, 'per': 32, 'fifty-five': 1, 'one': 161, 'ceiling': 14, '``': 8, 'growth': 149, 'recorded': 2, '5-1/2': 8, 'must': 1, 'sure': 7, 'four-to-five': 1, 'annual': 72, 'gain': 40, 'seen': 2, 'ahead': 10, 'june': 1, 'cost': 3, 'during': 46, 'last': 146, 'fifty-eight': 4, 'deficit': 40, 'deficit-to-gdp': 5, 'registered': 5, 'compared': 128, 'rate': 76, 'vigure': 2, 'six': 162, 'with': 28, 'every': 4, 'despite': 5, 'share': 11, 'up': 32, 'premium': 3, 'believed': 13, 'said': 60, 'figure': 14, '0-3': 3, 'set': 12, 'average': 9, 'level': 35, 'mark': 2, 'goes': 1, 'jump': 27, 'economic': 14, 'since': 70, '23,000': 2, 'behind': 4, 'depreciation': 7, 'eight': 115, 'as': 61, 'withholding': 3, 'each': 15, 'public': 6, 'supporting': 2, 'when': 14, 'surge': 4, 'january': 3, 'above': 31, 'forecast': 12, 'if': 3, 'net': 9, 'next': 72, 'ownership': 1, 'preferred': 1, 'wanted': 11, 'respectively': 54, 'rather': 2, 'improvement': 1, '25-26': 3, 'saw': 2, '2-3': 4, 'nic': 2, 'seasonally': 3, 'monthly': 19, 'slump': 6, 'benchmark': 1, 'customs': 1, 'plan': 6, 'expect': 2, 'gdp': 25, 'chance': 14, 'levs': 1, 'which': 11, 'laid': 1, 'backing': 1, \"''\": 22, 'plunge': 4, 'unless': 3, 'wage': 22, 'pickup': 6, 'voting': 2, 'annually': 25, '60-70': 1, 'they': 1, 'yr/yr': 6, 'forty-seven': 2, 'excise': 3, 'sales': 14, 'sparking': 1, 'seeing': 4, 'sought': 1, 'raise': 2, 'twi': 1, 'de': 4, 'price': 5, 'pct': 1, 'pace': 8, '7-8': 1, 'more': 24, 'owned': 18, 'half': 6, 'climb': 2, 'down': 14, 'poverty': 3, 'tariff': 5, 'fifteen': 6, 'stayaway': 2, 'will': 17, 'month-on-': 1, '25-35': 1, 'goal': 8, 'interest': 8, 'four-year': 2, 'eighty': 5, 'surprised': 1, 'infrastructure': 1, \"'yes\": 2, 'tax': 34, 'cuts': 3, 'reduction': 8, 'was': 27, 'nominal': 6, 'projected': 3, 'investments': 1, 'balance': 1, 'food': 1, 'other': 1, 'minfin': 1, 'its': 4, 'cut': 11, '-': 5, 'earlier': 6, 'duties': 1, 'less': 14, 'now': 15, 'pure': 2, 'pay': 25, 'period': 3, 'increases': 5, 'discount': 11, 'expected': 8, 'that': 10, 'allowed': 1, 'meant': 1, '9-1/8': 1, 'due': 12, '8-7/8': 1, 'global': 1, 'becomes': 1, 'first-quarter': 5, 'act': 1, 'live': 3, 'could': 6, 'although': 3, '70-75': 2, 'weighting': 11, 'zero': 12, 'year-': 1, 'via': 1, 'trading': 1, '2-1/2': 7, 'went': 4, 'saying': 5, 'bed': 1, 'rating': 2, 'dual-currency': 1, '..': 1, 'repectively': 1, 'cpi': 5, 'deficit/gdp': 5, 'downside': 2, 'mainly': 3, 'estimate': 2, 'fee': 2, 'budget': 4, 'overall': 5, 'being': 2, '1-1/2': 5, 'twenty': 2, '10-15': 5, 'going': 2, 'towards': 2, 'into': 2, 'maastricht': 7, 'there': 3, 'added': 1, '15-20': 12, 'before': 6, 'income': 1, 'failed': 2, 'primary': 1, 'three-to-nine': 3, 'enhancement': 1, 'bond': 4, 'swing': 1, 'owner': 1, 'year-on-': 2, 'annualized': 11, '20-25': 4, 'because': 5, 'capacity': 1, 'viewed': 1, 'surcharge': 6, 'q1': 1, 'plus': 10, 'band': 7, 'consensus': 1, 'result': 4, 'currently': 6, 'agreed': 1, 'might': 2, '15-16': 5, 'offered': 1, 'november': 3, 'fluctuation': 6, 'two-and-a-quarter': 1, 'written': 2, 'april': 5, 'exactly': 1, 'looks': 2, 'support': 6, 'adustable-rate': 1, 'eighty-four': 2, 'reported': 6, 'shareholding': 2, 'invested': 1, 'minus': 1, 'm/m': 1, 'y/y': 1, '7-10': 7, 'corporate': 3, 'feel': 1, 'fifty-nine': 1, 'want': 7, 'are': 20, '75-80': 2, 'criterion': 4, 'yesterday': 1, 'reflect': 1, 'unemployed': 4, 'advance': 2, 'built': 1, '1/2': 2, '+/-7.5': 1, 'cotton': 1, 'fifty': 2, 'compard': 2, '30-32': 1, 'long-term': 1, 'interest-rate': 1, 'general': 4, 'goods': 1, 'limit': 11, 'foreign': 4, 'gross': 7, 'measured': 2, 'employment': 4, 'available': 1, 'tuesday': 1, '2-1/4': 2, 'guaranteed': 1, 'throughout': 1, 'larger': 1, 'thought': 10, 'claimed': 1, 'deficit-gdp': 2, 'range': 12, 'possibility': 1, 'bonds': 2, 'levels': 5, 'exclusion': 6, 'consumption': 3, 'nationwide': 5, 'originally': 5, 'leap': 2, 'based': 3, '3-1/2': 2, '6-1/2': 9, '30-40': 2, 'o': 2, 'subside': 1, 'levy': 1, 'expansion': 10, 'outcome': 1, 'should': 4, 'october': 3, 'boom': 1, 'adjustable-rate': 2, 'production': 2, 'export': 4, 'local': 2, 'revised': 1, '5-6': 1, 'year-over-year': 3, 'danger': 1, 'gap': 4, 'indicates': 3, 'shows': 3, 'within': 2, '...': 4, 'effective': 11, 'dividend': 2, 'volume': 1, 'ten': 10, 'ticket': 2, 'may': 6, 'collected': 1, 'three-and-a-half': 1, '76-77': 1, 'across-the-board': 1, 'vote': 2, '45-55': 1, 'seven-to-eight': 1, '14-15': 1, 'have': 2, 'forgiveness': 2, 'instead': 5, 'real': 12, 'did': 3, 'effort': 2, 'results': 1, 'backdated': 2, 'predicted': 3, 'toward': 1, 'slide': 2, 'fifty-four': 2, 'earnings': 2, 'eighty-seven': 1, 'rejection': 2, 'thereafter': 1, 'either': 3, 'experiencing': 2, 'market': 6, 'salary': 7, '13-1/2': 1, 'it': 2, 'needed': 1, '3-5': 2, '45-46': 1, 'basic': 5, '5,000': 1, 'felt': 2, 'annualised': 1, 'rebate': 1, 'including': 4, 'according': 1, 'can': 1, 'buyback': 1, 'ltd': 1, '75-85': 1, '60-75': 1, 'had': 6, 'year-on': 1, 'government': 1, '12-13': 2, '5-9/16': 1, '5-5/8': 1, 'unit': 1, 'hurdle': 2, '1,000': 1, 'solidarity': 1, '5-3/8': 1, 'money': 3, 'not': 3, 'initially': 1, 'preference': 1, 'flowing': 1, 'btps': 2, 'placed': 2, 'required': 3, 'industrial': 4, 'joblessness': 1, 'produced': 2, 'maximum': 1, '8,000': 1, 'envisaged': 2, 'vat': 4, 'equity': 3, 'spending': 2, 'semi-annual': 3, '10-11': 3, '30-35': 1, 'yield': 5, 'restoring': 1, ';': 30, 'away': 2, 'around': 2, 'stock': 2, 'he': 3, '?': 4, 'later': 2, 'thirty-five': 1, '31-40': 1, 'ninety-eight': 2, 'investment': 1, 'seventy-nine': 1, 'requirement': 2, 'again': 1, 'margin': 3, 'return': 3, 'expires': 1, 'banks': 1, 'special': 1, 'paper': 1, '9-13': 1, 'm2': 1, 'alcohol': 1, 'onto': 1, 'narrow': 1, 'vs': 1, 'voted': 2, 'recovery': 1, 'predicting': 1, 'doubted': 1, 'march': 6, 'ccts': 1, 'achieved': 2, 'across': 2, 'two-year': 3, 'divested': 1, 'import': 10, 'diagonal': 1, 'assessed': 1, 'under': 3, 'barely': 1, 'gilt': 3, 'claim': 1, 'military': 1, 'backed': 2, 'late': 3, 'ninety': 2, 'namibian': 1, 'ans': 1, 'quarterly': 3, 'gone': 1, 'forty-nine': 2, 'finding': 1, '15-to-20': 2, '23-24': 1, '34-35': 1, 'majority': 1, 'hundred': 2, 'also': 2, 'barrier': 2, 'repos': 1, 'applied': 2, '5-7/16': 2, 'believe': 1, 'passed': 1, 'three-point-zero': 1, 'taken': 1, 'seventy': 1, '20-30': 3, '3,000': 1, 'just': 1, 'fewer': 7, 'ground': 1, '8-6': 1, 'grain': 2, 'energy': 1, '2,077.1': 1, 'thirty-two': 1, 'stakes': 2, 'corporation': 2, 'tuition': 1, 'wednesday': 1, 'debt': 2, 'five-year': 2, 'base': 3, 'telecommunications': 1, 'inflation-control': 1, '50-50': 1, 'basis': 1, 'ratio': 3, 'collection': 1, 'quarter-on-quarter': 2, 'intend': 1, '3/4': 1, 'means': 2, 'maybe': 1, 'undervalued': 2, 'deficit-to-gross': 3, 'greater': 1, 'effctive': 1, '10-12': 1, '13-14': 2, 'loss': 2, '2,072.7': 1, '2,040.5': 1, 'several': 1, 'payment': 1, 'likely': 1, 'hong': 1, 'announced': 1, 'december': 1, 'signalled': 1, 'forty': 1, 'speed': 1, 'worth': 1, 'twenty-four': 1, 'shortfall': 1, 'operational': 1, '13-15': 1, '24-26': 1, 'bands': 2, 'forty-three': 1, 'disagreed': 2, 'overvalued': 1, '5-3/4': 2, 'bono': 1, '6-1/4': 2, 'revenue': 1, 'absenteeism': 2, 'state-owned': 1, 'decrease': 2, 'agricultural': 2, 'million': 1, 'argued': 1, 'cited': 1, 'manufacturers': 2, 'held': 1, 'though': 1, '85,000': 2, 'remained': 1, '12-15': 1, 'veto': 1, 'commission': 2, 'duty': 2, 'social': 1, '+33': 1, 'any': 1, 'dip': 1, 'intended': 2, '20-21': 2, 'rule': 2, 'rally': 1, 'seems': 1, 'amid': 1, 'key': 1, 'adjusted': 3, 'tied': 2, 'reporting': 4, 'majaority': 1, 'bank': 2, '2-5': 1, 'august': 1, 'sounded': 2, 'decrase': 1, 'negative': 2, 'sixty-two': 1, 'relative': 1, 'until': 3, 'complied': 1, 'zakat': 1, 'sustained': 1, 'gnp': 1, 'manufacturing': 1, 'highway': 2, 'fifty-one': 1, 'rebound': 1, 'sixty': 2, 'approved': 1, 'disapproved': 1, 'already': 1, 'value-added': 1, 'year-end': 1, 'from6.1': 1, 'deflation': 2, 'minimum': 3, '15-15.5': 1, 'area': 1, 'zone': 1, '2-2.25': 1, '2-2.5': 1, 'profit': 1, 'retroactive': 1, 'true': 1, 'right': 1, '15-17': 1, 'ex-autos': 1, 'official': 2, 'forty-four': 1, 'approval': 1, 'seventy-one': 2, 'eventually': 1, 'weaker': 2, 'inclusion': 1, '13/15': 1, 'full': 1, 'coming': 1, 'freom': 1, 'year-average': 1, 'emu': 1, '10-year': 3, 'bonus': 2, 'expenditure': 1, 'probability': 2, 'sub-three': 1, 'say': 1, 'forward': 1, 'spike': 1, 'both': 2, '15-40': 1, 'anticipated': 1, 'favored': 1, 'thanks': 1, 'expecting': 4, 'capital': 2, 'deterioration': 1, 'suggests': 1, '6.l': 1, 'clip': 1, 'gains': 1, 'home': 1, 'seventy-two': 1, 'fixed': 1, 'served': 1, 'exports': 1, 'participation': 1, 'enjoyed': 1, '3-3.5': 1, '3-4': 1, 'discounted': 1, ':': 1, '5-year': 1, 'targeted': 1, 'deficit/gross': 1, '20-year': 1, 'simple': 1, 'few': 1, 'control': 1, 'forty-one': 1, 'expressed': 1, '5-10': 1, 'spread': 1, 'incresae': 1, 'restoration': 1, 'thursday': 1, 'supported': 1, 'volatility': 1, 'one-half': 2, 'committed': 1, 'development': 1, 'rejected': 1, 'withough': 1, 'same': 1, 'setting': 1, 'too': 1, 'february': 1, 'wide': 1, 'government-owned': 1, 'limits': 1, '10-13': 1, '18-22': 1, 'retracement': 1, 'crr': 1, 'stronger': 1, 'ninety-seven': 2, 'certain': 1, 'tariffs': 1, 'confident': 1, 'consists': 1, 'hard': 1, '6-7': 1, 'full-year': 1, '4-5': 1, 'jobless': 1, 'fourteen': 1, 'accounting': 1, 'ninety-five': 1, 'rupee': 1, 'core': 1, 'likelihood': 2, 'payable': 1, '80-85': 1, 'except': 2, 'mark/dollar': 1, 'requires': 1, 'short': 2, 'received': 1, 'posted': 2, '2-3/4': 1, 'eighty-two': 1, 'started': 1, 'see': 1, '9-1/4': 1, 'thirty': 1, 'today': 1, 'surtax': 1, 'exemptions': 1, 'line': 1, 'objective': 1, 'tourism': 1, '40-45': 1, 'occupancy': 1, 'prevailing': 1, 'early': 1, 'erosion': 1, '7,000': 1, 'hit': 1, 'prediction': 1, 'than': 2, 'takes': 1, 'reflects': 1, 'd.c.': 1, 'balloon': 1, 'offer': 1, 'conform': 1, 'positive': 1, 'underlying': 1}\n",
            "76\n",
            "0.20523965039827702\n",
            "0.03583338199494498\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3oyw5Ypa-9R5"
      },
      "source": [
        "(c) To find the words distributionally most similar to the most frequent word, I used the 'k_nearest' function, which returns the K Nearest Neighbours to a given word. This is one of the measures for distributional similarity."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VwkEaVnPRjzA",
        "outputId": "8cc04aa8-55c1-4708-9a63-98be5eb1e05f"
      },
      "source": [
        "vectors_1.k_nearest('percent', n=1000, k=10)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[('percent', 1.0),\n",
              " ('years', 0.11461772857323395),\n",
              " ('percentage', 0.09399711061094099),\n",
              " ('months', 0.08948625755026174),\n",
              " ('days', 0.06770173068300918),\n",
              " ('pct', 0.06383647554681882),\n",
              " ('billion', 0.05715027528141128),\n",
              " ('year', 0.05505528968737595),\n",
              " ('weeks', 0.05281639619180777),\n",
              " ('year-on-year', 0.05158583980199992)]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Uo009tKWrZoB"
      },
      "source": [
        "5) Plan and carry out an investigation into the correlation between semantic similarity according to WordNet and distributional similarity with different context window sizes. You should make sure that you include a graph of how correlation varies with context window size and that you discuss your results. [25 marks]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2Zl_12oMSoIv"
      },
      "source": [
        "(5) **Plan**\n",
        "\n",
        "\n",
        "\n",
        "To investigate the correlation between semantic and distributional similarity, I will use the top 10 most frequently occurring as the words for my pairs. I will then calculate the Semantic Similarity for these words, and the distributional similarity, and present these in a graph. For the semantic similarity, I will use the Path Similarity measure for consistency, as this is the measure I used earlier in the notebook. I will also compare the Semantic and Distributional similarity over a range of Window Sizes and present these results. Specifically, I will use the Window Sizes: 1, 3, 5, 7 and 9. Finally I will present the Spearman's rank Correlation for the data over different window sizes in a table for easy analysis. From this data and comparisons, I will try to conclude which window size for distributional similarity best approximates semantic similarity. I will also try to answer the question, does semantic similarity correlate with distributional similarity, over a range of context window sizes.\n",
        "\n",
        "Note that, I am removing 'pct' from the top 10 list for this analysis as it is synonymous with 'percent' and therefore all comparisons with either of these words will have the same score. This will allow a more interesting analysis for the pairs of words. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HRB98MIhDb8g"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "from mlxtend.plotting import category_scatter\n",
        "#pd.set_option(\"max_rows\", None)\n",
        "#pd.reset_option('display.max_rows')\n",
        "\n",
        "x = \"Semantic Similarity\"\n",
        "y = \"Distributional Similarity\"\n",
        "def draw_scatter(x,y, dataframe, title):\n",
        "\n",
        "    df[x]=dataframe[x].map(float)\n",
        "    df[y]=dataframe[y].map(float)\n",
        "    \n",
        "    df.plot.scatter(x,y, title=title)\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JBymlTzsviaj",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "397d0b3c-b9cb-4a8b-e5ae-db3e0d46b57c"
      },
      "source": [
        "top10 = list(top1000)[:11]\n",
        "top10.remove('pct') #I am removing 'pct' from the list for this analysis as it is synonymous with 'percent' and therefore all comparisons with either of these words will have the same score\n",
        "print(top10)\n",
        "\n",
        "\n",
        "def find_scores(windowsize):\n",
        "  scores = []\n",
        "  vectors = word_vectors(sentences,window=windowsize)\n",
        "  for i in range(len(top10)):\n",
        "    for j in range(len(top10)):\n",
        "      if top10[i] != top10[j]:\n",
        "        scores.append((top10[i], top10[j], word_similarity(top10[i], top10[j], \"path\"),  vectors.similarity(top10[i], top10[j])))\n",
        "  return scores        \n",
        "\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "['percent', 'bank', 'year', 'million', 'government', 'may', 'billion', 'uk', 'tax', 'rate']\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 627
        },
        "id": "Ul0pNxc7LZGY",
        "outputId": "15ac4123-d5cd-48c0-9729-028a515d6f0b"
      },
      "source": [
        "data = find_scores(1)\n",
        "df = pd.DataFrame(data, columns=[\"Word 1\", \"Word 2\", \"Semantic Similarity\", \"Distributional Similarity\"])\n",
        "print(df)\n",
        "draw_scatter(x,y, df, title='Correlation between Semantic and Distributional Similarity with a window size of 1 ')\n",
        "df.corr(method=\"spearman\")\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "     Word 1      Word 2  Semantic Similarity  Distributional Similarity\n",
            "0   percent        bank             0.100000                   0.003325\n",
            "1   percent        year             0.090909                   0.055055\n",
            "2   percent     million             0.090909                   0.018522\n",
            "3   percent  government             0.083333                   0.008617\n",
            "4   percent         may             0.076923                   0.021846\n",
            "..      ...         ...                  ...                        ...\n",
            "85     rate  government             0.111111                   0.020074\n",
            "86     rate         may             0.100000                   0.021189\n",
            "87     rate     billion             0.125000                   0.006152\n",
            "88     rate          uk             0.071429                   0.010216\n",
            "89     rate         tax             0.125000                   0.045404\n",
            "\n",
            "[90 rows x 4 columns]\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Semantic Similarity</th>\n",
              "      <th>Distributional Similarity</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Semantic Similarity</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.241242</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Distributional Similarity</th>\n",
              "      <td>0.241242</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                           Semantic Similarity  Distributional Similarity\n",
              "Semantic Similarity                   1.000000                   0.241242\n",
              "Distributional Similarity             0.241242                   1.000000"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 80
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 627
        },
        "id": "vSBoKkZytKil",
        "outputId": "ef9250c5-ba67-4d69-b5d6-39c4bf913a52"
      },
      "source": [
        "data3 = find_scores(3)\n",
        "df3 = pd.DataFrame(data3, columns=[\"Word 1\", \"Word 2\", \"Semantic Similarity\", \"Distributional Similarity\"])\n",
        "print(df3)\n",
        "draw_scatter(x,y, df3, title='Correlation between Semantic and Distributional Similarity with a window size of 3 ')\n",
        "df3.corr(method=\"spearman\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "     Word 1      Word 2  Semantic Similarity  Distributional Similarity\n",
            "0   percent        bank             0.100000                   0.025700\n",
            "1   percent        year             0.090909                   0.077094\n",
            "2   percent     million             0.090909                   0.032659\n",
            "3   percent  government             0.083333                   0.036266\n",
            "4   percent         may             0.076923                   0.039312\n",
            "..      ...         ...                  ...                        ...\n",
            "85     rate  government             0.111111                   0.031625\n",
            "86     rate         may             0.100000                   0.043050\n",
            "87     rate     billion             0.125000                   0.037203\n",
            "88     rate          uk             0.071429                   0.029004\n",
            "89     rate         tax             0.125000                   0.058718\n",
            "\n",
            "[90 rows x 4 columns]\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Semantic Similarity</th>\n",
              "      <th>Distributional Similarity</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Semantic Similarity</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.430618</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Distributional Similarity</th>\n",
              "      <td>0.430618</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                           Semantic Similarity  Distributional Similarity\n",
              "Semantic Similarity                   1.000000                   0.430618\n",
              "Distributional Similarity             0.430618                   1.000000"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 81
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 627
        },
        "id": "QgDFIO4ztYC9",
        "outputId": "5e1c1e2b-0f7b-4ede-9e5c-9ff94ba3f821"
      },
      "source": [
        "data5 = find_scores(5)\n",
        "df5 = pd.DataFrame(data5, columns=[\"Word 1\", \"Word 2\", \"Semantic Similarity\", \"Distributional Similarity\"])\n",
        "print(df5)\n",
        "draw_scatter(x,y, df5, title=\"Correlation between Semantic and Distributional Similarity with a window size of 5\")\n",
        "df5.corr(method=\"spearman\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "     Word 1      Word 2  Semantic Similarity  Distributional Similarity\n",
            "0   percent        bank             0.100000                   0.040065\n",
            "1   percent        year             0.090909                   0.104638\n",
            "2   percent     million             0.090909                   0.041177\n",
            "3   percent  government             0.083333                   0.042019\n",
            "4   percent         may             0.076923                   0.055699\n",
            "..      ...         ...                  ...                        ...\n",
            "85     rate  government             0.111111                   0.044276\n",
            "86     rate         may             0.100000                   0.049544\n",
            "87     rate     billion             0.125000                   0.044724\n",
            "88     rate          uk             0.071429                   0.037803\n",
            "89     rate         tax             0.125000                   0.062412\n",
            "\n",
            "[90 rows x 4 columns]\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Semantic Similarity</th>\n",
              "      <th>Distributional Similarity</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Semantic Similarity</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.457149</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Distributional Similarity</th>\n",
              "      <td>0.457149</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                           Semantic Similarity  Distributional Similarity\n",
              "Semantic Similarity                   1.000000                   0.457149\n",
              "Distributional Similarity             0.457149                   1.000000"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 82
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 627
        },
        "id": "ilcunsSj0SIp",
        "outputId": "2535aced-96b5-4973-d76e-dccd01e23eba"
      },
      "source": [
        "data7 = find_scores(7)\n",
        "df7 = pd.DataFrame(data7, columns=[\"Word 1\", \"Word 2\", \"Semantic Similarity\", \"Distributional Similarity\"])\n",
        "print(df7)\n",
        "draw_scatter(x,y, df7, title=\"Correlation between Semantic and Distributional Similarity with a window size of 7\")\n",
        "df7.corr(method=\"spearman\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "     Word 1      Word 2  Semantic Similarity  Distributional Similarity\n",
            "0   percent        bank             0.100000                   0.048133\n",
            "1   percent        year             0.090909                   0.132723\n",
            "2   percent     million             0.090909                   0.046449\n",
            "3   percent  government             0.083333                   0.051035\n",
            "4   percent         may             0.076923                   0.072218\n",
            "..      ...         ...                  ...                        ...\n",
            "85     rate  government             0.111111                   0.049048\n",
            "86     rate         may             0.100000                   0.053217\n",
            "87     rate     billion             0.125000                   0.047552\n",
            "88     rate          uk             0.071429                   0.043458\n",
            "89     rate         tax             0.125000                   0.066052\n",
            "\n",
            "[90 rows x 4 columns]\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Semantic Similarity</th>\n",
              "      <th>Distributional Similarity</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Semantic Similarity</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.445075</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Distributional Similarity</th>\n",
              "      <td>0.445075</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                           Semantic Similarity  Distributional Similarity\n",
              "Semantic Similarity                   1.000000                   0.445075\n",
              "Distributional Similarity             0.445075                   1.000000"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 83
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 627
        },
        "id": "XmOE-mWI1YC7",
        "outputId": "1973fa90-022b-438e-c384-cbfd481784be"
      },
      "source": [
        "data9 = find_scores(9)\n",
        "df9 = pd.DataFrame(data9, columns=[\"Word 1\", \"Word 2\", \"Semantic Similarity\", \"Distributional Similarity\"])\n",
        "print(df9)\n",
        "draw_scatter(x,y, df9, title=\"Correlation between Semantic and Distributional Similarity with a window size of 9\")\n",
        "df9.corr(method=\"spearman\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "     Word 1      Word 2  Semantic Similarity  Distributional Similarity\n",
            "0   percent        bank             0.100000                   0.052004\n",
            "1   percent        year             0.090909                   0.154335\n",
            "2   percent     million             0.090909                   0.051083\n",
            "3   percent  government             0.083333                   0.056888\n",
            "4   percent         may             0.076923                   0.082413\n",
            "..      ...         ...                  ...                        ...\n",
            "85     rate  government             0.111111                   0.052627\n",
            "86     rate         may             0.100000                   0.061206\n",
            "87     rate     billion             0.125000                   0.051204\n",
            "88     rate          uk             0.071429                   0.044194\n",
            "89     rate         tax             0.125000                   0.072210\n",
            "\n",
            "[90 rows x 4 columns]\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Semantic Similarity</th>\n",
              "      <th>Distributional Similarity</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Semantic Similarity</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.452166</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Distributional Similarity</th>\n",
              "      <td>0.452166</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                           Semantic Similarity  Distributional Similarity\n",
              "Semantic Similarity                   1.000000                   0.452166\n",
              "Distributional Similarity             0.452166                   1.000000"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 84
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dYaVuK_FVb1b"
      },
      "source": [
        "def find_scores2():\n",
        "  '''\n",
        "  A second function to find the semantic scores and distributional score between pairs of words. This function calculates the distributional similarity using window size: 1, 3, 5, 7, 9\n",
        "  '''\n",
        "  scores = []\n",
        "  for k in range(1, 10, 2):\n",
        "    vectors = word_vectors(sentences,window=k)\n",
        "    for i in range(len(top10)):\n",
        "      for j in range(len(top10)):\n",
        "        if top10[i] != top10[j]:\n",
        "          scores.append([top10[i], top10[j], word_similarity(top10[i], top10[j], \"path\"), k,  vectors.similarity(top10[i], top10[j])])\n",
        "  return scores "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 419
        },
        "id": "Xrw2sj1nbgHs",
        "outputId": "f4166d6c-3460-4292-e681-b101c8091107"
      },
      "source": [
        "total_data = find_scores2()\n",
        "df6 = pd.DataFrame(total_data, columns=[\"Word 1\", \"Word 2\", \"Semantic Similarity\", \"Window Size\", \"Distributional Similarity\"])\n",
        "df6"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Word 1</th>\n",
              "      <th>Word 2</th>\n",
              "      <th>Semantic Similarity</th>\n",
              "      <th>Window Size</th>\n",
              "      <th>Distributional Similarity</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>percent</td>\n",
              "      <td>bank</td>\n",
              "      <td>0.100000</td>\n",
              "      <td>1</td>\n",
              "      <td>0.003325</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>percent</td>\n",
              "      <td>year</td>\n",
              "      <td>0.090909</td>\n",
              "      <td>1</td>\n",
              "      <td>0.055055</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>percent</td>\n",
              "      <td>million</td>\n",
              "      <td>0.090909</td>\n",
              "      <td>1</td>\n",
              "      <td>0.018522</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>percent</td>\n",
              "      <td>government</td>\n",
              "      <td>0.083333</td>\n",
              "      <td>1</td>\n",
              "      <td>0.008617</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>percent</td>\n",
              "      <td>may</td>\n",
              "      <td>0.076923</td>\n",
              "      <td>1</td>\n",
              "      <td>0.021846</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>445</th>\n",
              "      <td>rate</td>\n",
              "      <td>government</td>\n",
              "      <td>0.111111</td>\n",
              "      <td>9</td>\n",
              "      <td>0.052627</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>446</th>\n",
              "      <td>rate</td>\n",
              "      <td>may</td>\n",
              "      <td>0.100000</td>\n",
              "      <td>9</td>\n",
              "      <td>0.061206</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>447</th>\n",
              "      <td>rate</td>\n",
              "      <td>billion</td>\n",
              "      <td>0.125000</td>\n",
              "      <td>9</td>\n",
              "      <td>0.051204</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>448</th>\n",
              "      <td>rate</td>\n",
              "      <td>uk</td>\n",
              "      <td>0.071429</td>\n",
              "      <td>9</td>\n",
              "      <td>0.044194</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>449</th>\n",
              "      <td>rate</td>\n",
              "      <td>tax</td>\n",
              "      <td>0.125000</td>\n",
              "      <td>9</td>\n",
              "      <td>0.072210</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>450 rows × 5 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "      Word 1      Word 2  ...  Window Size  Distributional Similarity\n",
              "0    percent        bank  ...            1                   0.003325\n",
              "1    percent        year  ...            1                   0.055055\n",
              "2    percent     million  ...            1                   0.018522\n",
              "3    percent  government  ...            1                   0.008617\n",
              "4    percent         may  ...            1                   0.021846\n",
              "..       ...         ...  ...          ...                        ...\n",
              "445     rate  government  ...            9                   0.052627\n",
              "446     rate         may  ...            9                   0.061206\n",
              "447     rate     billion  ...            9                   0.051204\n",
              "448     rate          uk  ...            9                   0.044194\n",
              "449     rate         tax  ...            9                   0.072210\n",
              "\n",
              "[450 rows x 5 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 73
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 362
        },
        "id": "QIaDacKlDG1l",
        "outputId": "c555587b-ba68-4970-fc22-045f539c165b"
      },
      "source": [
        "fig2 = category_scatter(x='Semantic Similarity', y='Distributional Similarity', label_col='Window Size', \n",
        "                       data=df6, legend_loc='best')\n",
        "fig2.suptitle('Correlation between Semantic and Distributional Similarity')\n",
        "ax1 = fig2.add_subplot()\n",
        "ax1.set_xlabel(\"Semantic Similarity\")\n",
        "ax1.set_ylabel(\"Distributional Similarity\")\n",
        "fig2.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:4: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.\n",
            "  after removing the cwd from sys.path.\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 142
        },
        "id": "Wcb29sos7xQQ",
        "outputId": "7883c756-a8cd-4b5f-d5b7-f4186ca7ab50"
      },
      "source": [
        "df6.corr(method=\"spearman\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Semantic Similarity</th>\n",
              "      <th>Window Size</th>\n",
              "      <th>Distributional Similarity</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Semantic Similarity</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.368076</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Window Size</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.527108</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Distributional Similarity</th>\n",
              "      <td>0.368076</td>\n",
              "      <td>0.527108</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                           Semantic Similarity  ...  Distributional Similarity\n",
              "Semantic Similarity                   1.000000  ...                   0.368076\n",
              "Window Size                           0.000000  ...                   0.527108\n",
              "Distributional Similarity             0.368076  ...                   1.000000\n",
              "\n",
              "[3 rows x 3 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 75
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PQgkINSe26sK",
        "outputId": "196cf21a-3ef4-487d-b8c4-de3fb2068db1"
      },
      "source": [
        "correlations = { 'Window Size': [1, 3, 5, 7, 9, 'Overall'],\n",
        "                 'Correlation': [0.241242, 0.430618, 0.457149, 0.445075, 0.452166, 0.368076]}\n",
        "df8 = pd.DataFrame(correlations, columns=['Window Size', 'Correlation']) \n",
        "print(df8)     "
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "  Window Size  Correlation\n",
            "0           1     0.241242\n",
            "1           3     0.430618\n",
            "2           5     0.457149\n",
            "3           7     0.445075\n",
            "4           9     0.452166\n",
            "5     Overall     0.368076\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dOJvKrSd_DA6"
      },
      "source": [
        " In the scatter plots, we can see in each one, a data point at semantic similarity 1.0, upon inspection, I discovered that this is the Path Similarity score for the words 'billion' and 'million' which is interesting. The distributional similarity for the same pair of words is much lower, at 0.12 to 0.10 over the different window sizes. \n",
        "Through this investigation, we can see that as the context window size increases, the distributional similarity score for a word pair also increases. Given the correlations calculated for each window size, we can see that a window size of 5 for distributional similarity gives the best approximation of semantic similarity, as this is the highest correlation of 0.457. The correlation between Semantic and Distributional Similarity levels off around   0.45 from a window size of 5 to 9. From this Spearman's Rank correlation coefficient, we can interpret that there is a moderate positive correlation/relationship between Semantic and Distributional Similarity, over a range of pairs of words. "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sNkuhCLA7-3K"
      },
      "source": [
        "Submission Length: 1448"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "34rdlS_iPov6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8eddaa98-a7b3-4d8c-b0cc-98cd98fd91d2"
      },
      "source": [
        "##This code will word count all of the markdown cells in the notebook saved at filepath\n",
        "##Running it before providing any answers shows that the questions have a word count of 388\n",
        "\n",
        "import io\n",
        "from nbformat import current\n",
        "\n",
        "filepath=\"/content/drive/My Drive/Colab Notebooks/NLE_assignment2_brief/NLEassignment2.ipynb\"\n",
        "question_count=568\n",
        "\n",
        "with io.open(filepath, 'r', encoding='utf-8') as f:\n",
        "    nb = current.read(f, 'json')\n",
        "\n",
        "word_count = 0\n",
        "for cell in nb.worksheets[0].cells:\n",
        "    if cell.cell_type == \"markdown\":\n",
        "        word_count += len(cell['source'].replace('#', '').lstrip().split(' '))\n",
        "print(\"Submission length is {}\".format(word_count-question_count))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/nbformat/current.py:19: UserWarning: nbformat.current is deprecated.\n",
            "\n",
            "- use nbformat for read/write/validate public API\n",
            "- use nbformat.vX directly to composing notebooks of a particular version\n",
            "\n",
            "  \"\"\")\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "Submission length is 1448\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bOoqLcQJBwGv"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}